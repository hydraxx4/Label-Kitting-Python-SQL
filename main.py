# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LabelKitting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtGui, QtWidgets, QtCore
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QPixmap
import pyodbc
import zpl
import configparser
from barcode import Code128
from barcode.writer import ImageWriter
from cryptography.fernet import Fernet



class KittingLabel(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # create label widgets
        self.labelJobCap = QtWidgets.QLabel("Job:", self)
        self.labelJobValue = QtWidgets.QLabel(self)
        self.labelSuffixCap = QtWidgets.QLabel("Suffix:", self)
        self.labelSuffixValue = QtWidgets.QLabel(self)
        self.labelWCCap = QtWidgets.QLabel("WC:", self)
        self.labelWCValue = QtWidgets.QLabel(self)
        self.labelItemCap = QtWidgets.QLabel("Item:", self)
        self.labelItemValue = QtWidgets.QLabel(self)
        self.labelItemBarcode = QtWidgets.QLabel(self)
        self.labelDescCap = QtWidgets.QLabel("Desc:", self)
        self.labelDescValue = QtWidgets.QLabel(self)
        self.labelOnHandCap = QtWidgets.QLabel("OnHand:", self)
        self.labelOnHandValue = QtWidgets.QLabel(self)
        self.labelQtyNeedCap = QtWidgets.QLabel("QtyNeed:", self)
        self.labelQtyNeedValue = QtWidgets.QLabel(self)
        self.labelLocCap = QtWidgets.QLabel("Loc:", self)
        self.labelLocValue = QtWidgets.QLabel(self)
        self.labelSeqCap = QtWidgets.QLabel("Seq:", self)
        self.labelSeqValue = QtWidgets.QLabel(self)

        # set label styles
        self.labelJobCap.setObjectName("labelJobCap")
        self.labelJobValue.setObjectName("labelJobValue")
        self.labelSuffixCap.setObjectName("labelSuffixCap")
        self.labelSuffixValue.setObjectName("labelSuffixValue")
        self.labelWCCap.setObjectName("labelWCCap")
        self.labelWCValue.setObjectName("labelWCValue")
        self.labelItemCap.setObjectName("labelItemCap")
        self.labelItemValue.setObjectName("labelItemValue")
        self.labelItemBarcode.setObjectName("labelItemBarcode")

        # set label font size
        self.setStyleSheet("QLabel { font-size: 16pt; }")

        self.labelDescCap.setObjectName("labelDescCap")
        self.labelDescValue.setObjectName("labelDescValue")
        self.labelOnHandCap.setObjectName("labelOnHandCap")
        self.labelOnHandValue.setObjectName("labelOnHandValue")
        self.labelQtyNeedCap.setObjectName("labelQtyNeedCap")
        self.labelQtyNeedValue.setObjectName("labelQtyNeedValue")
        self.labelLocCap.setObjectName("labelLocCap")
        self.labelLocValue.setObjectName("labelLocValue")
        self.labelSeqCap.setObjectName("labelSeqCap")
        self.labelSeqValue.setObjectName("labelSeqValue")


        # create layout
        layout = QtWidgets.QGridLayout(self)
        layout.addWidget(self.labelJobCap, 0, 0)
        layout.addWidget(self.labelJobValue, 0, 1, 1, 3)
        layout.addWidget(self.labelSuffixCap, 0, 5, 1, 2)
        layout.addWidget(self.labelSuffixValue, 0, 7)
        layout.addWidget(self.labelWCCap, 0, 9)
        layout.addWidget(self.labelWCValue, 0, 10,1,2)
        layout.addWidget(self.labelItemCap, 1, 0)
        layout.addWidget(self.labelItemValue, 2, 1, 1, 8)

        layout.addWidget(self.labelItemBarcode, 1, 1, 1, 8, QtCore.Qt.AlignLeft)
        layout.addWidget(self.labelDescCap, 3, 0)
        layout.addWidget(self.labelDescValue, 3, 1, 1, 10)
        layout.addWidget(self.labelOnHandCap, 4, 0, 1, 2)
        layout.addWidget(self.labelOnHandValue, 4, 2, 1, 2)
        layout.addWidget(self.labelQtyNeedCap, 4, 5, 1, 2)
        layout.addWidget(self.labelQtyNeedValue, 4, 7, 1, 2)
        layout.addWidget(self.labelLocCap, 5, 0)
        layout.addWidget(self.labelLocValue, 5, 1, 1, 6)
        layout.addWidget(self.labelSeqCap, 5, 9)
        layout.addWidget(self.labelSeqValue, 5, 10)

        # set fixed size for the widget
        self.setFixedSize(600, 200) # (Width, Height) (3 : 1) Label

    def setLabel(self, job, suffix, wc, item, desc, onhand, qtyneed, loc, seq):
        self.labelJobValue.setText(job)
        self.labelSuffixValue.setText(suffix)
        self.labelWCValue.setText(wc)
        self.labelItemValue.setText(item)
        self.labelDescValue.setText(desc)
        self.labelOnHandValue.setText(onhand)
        self.labelQtyNeedValue.setText(qtyneed)
        self.labelLocValue.setText(loc)
        self.labelSeqValue.setText(seq)

        # Generate the barcode as an image file
        barcode_value = item
        code128 = Code128(barcode_value, writer=ImageWriter())
        code128_image = code128.render(
            writer_options={"module_width": 0.5, "module_height": 10, "quiet_zone": 10}
        )

        code128_image.crop((100, 0, code128_image.width - 100, code128_image.height - 80)).save("TT_barcode.png")

        pixmap = QPixmap("TT_barcode.png")
        self.labelItemBarcode.setPixmap(pixmap.scaledToWidth(500))




    # work 1 in Zebra
    def printLabel(self, labels, printer_name=None):
        try:
            # Get the printer name from the configuration file if it's not provided
            if printer_name is None:
                # Load the key used for encryption
                with open("key.key", "rb") as key_file:
                    key = key_file.read()

                # Load the encrypted configuration file
                with open("config.ini.encrypted", "rb") as encrypted_file:
                    encrypted_data = encrypted_file.read()

                # Decrypt the configuration file
                fernet = Fernet(key)
                decrypted_data = fernet.decrypt(encrypted_data)

                # Convert the decrypted data to a string
                config_string = decrypted_data.decode()

                # Read the configuration file using configparser
                config = configparser.ConfigParser()
                config.read_string(config_string)

                # Access the values in the configuration file
                printer_name = config.get('Printer', 'printer_name')


            # Create a connection to the printer
            conn = zpl.printer(printer_name)


            # Send the ZPL commands to the printer for each label
            for label in labels:
                conn.output(label.zpl())

            # Close the connection
            conn.close()

        except Exception as e:
            print(f"Failed to connect to printer: {e}") # ignore the error, it still can print the labels @_@

    # Work 2, to debug the label in pdf
    # def printLabel(self, labels):
    #     printer = QPrinter(QPrinter.PrinterResolution)
    #     printer.setOutputFormat(QPrinter.PdfFormat)
    #     printer.setPageSize(QPrinter.A4)
    #     printer.setOutputFileName("labels.pdf")
    #     painter = QtGui.QPainter()
    #     painter.begin(printer)
    #     try:
    #         for i, label in enumerate(labels):
    #             label.render(painter)
    #             if i < len(labels) - 1:
    #                 printer.newPage()
    #     finally:
    #         painter.end()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(526, 732)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.JoblineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.JoblineEdit.setObjectName("JoblineEdit")
        self.gridLayout.addWidget(self.JoblineEdit, 2, 1, 1, 3)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 5, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.gridLayout.addWidget(self.tableWidget, 3, 0, 1, 5)
        self.PrintAllButton = QtWidgets.QPushButton(self.centralwidget)
        self.PrintAllButton.setObjectName("PrintAllButton")
        self.gridLayout.addWidget(self.PrintAllButton, 4, 4, 1, 1)
        self.PrintSelectedButton = QtWidgets.QPushButton(self.centralwidget)
        self.PrintSelectedButton.setObjectName("PrintSelectedButton")
        self.gridLayout.addWidget(self.PrintSelectedButton, 4, 1, 1, 3)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("Btk Icon.png"))
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 0, 1, 4, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.ClearAllButton = QtWidgets.QPushButton(self.centralwidget)
        self.ClearAllButton.setObjectName("ClearAllButton")
        self.gridLayout.addWidget(self.ClearAllButton, 4, 0, 1, 1)
        self.ShowSuffixesButton = QtWidgets.QPushButton(self.centralwidget)
        self.ShowSuffixesButton.setObjectName("ShowSuffixesButton")
        self.gridLayout.addWidget(self.ShowSuffixesButton, 2, 4, 1, 1)
        self.JobLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.JobLabel.setFont(font)
        self.JobLabel.setObjectName("JobLabel")
        self.gridLayout.addWidget(self.JobLabel, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 526, 26))
        self.menubar.setObjectName("menubar")
        self.menuTT = QtWidgets.QMenu(self.menubar)
        self.menuTT.setObjectName("menuTT")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuTT.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # Trung Custom
        MainWindow.setWindowTitle("Label Kitting SL10")
        self.PrintSelectedButton.clicked.connect(self.print_selected)
        self.PrintAllButton.clicked.connect(self.print_all)
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 180)
        self.tableWidget.setColumnWidth(2, 200)
        self.ShowSuffixesButton.clicked.connect(self.show_suffixes_button)
        self.ClearAllButton.clicked.connect(self.clear_all_button)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:20pt; color:#0055ff;\">Label Kitting v2023 </span></p></body></html>"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Suffix"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Total Number"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Status"))
        self.PrintAllButton.setText(_translate("MainWindow", "Print All"))
        self.PrintSelectedButton.setText(_translate("MainWindow", "Print Selected"))
        self.ClearAllButton.setText(_translate("MainWindow", "Clear All"))
        self.ShowSuffixesButton.setText(_translate("MainWindow", "Show Suffixes"))
        self.JobLabel.setText(_translate("MainWindow", "Job:"))
        self.menuTT.setTitle(_translate("MainWindow", "TT"))



    def server_configuration(self):
        # Create a sql account with write access, do not use sa or admin account.
        try:
            # Load the key used for encryption
            with open("key.key", "rb") as key_file:
                key = key_file.read()

            # Load the encrypted configuration file
            with open("config.ini.encrypted", "rb") as encrypted_file:
                encrypted_data = encrypted_file.read()

            # Decrypt the configuration file
            fernet = Fernet(key)
            decrypted_data = fernet.decrypt(encrypted_data)

            # Convert the decrypted data to a string
            config_string = decrypted_data.decode()

            # Read the configuration file using configparser
            config = configparser.ConfigParser()
            config.read_string(config_string)

            # Access the values in the configuration file
            server = config.get('SQL Server - name or IP address', 'server')
            database = config.get('Database', 'database')
            username = config.get('Credentials', 'username')
            password = config.get('Credentials', 'password')

            conn = pyodbc.connect('Driver={SQL Server};'
                                  f'Server={server};'
                                  f'Database={database};'
                                  f'UID={username};'
                                  f'PWD={password};'
                                  'Trusted_Connection=no;')
            cur = conn.cursor()
            return conn, cur
        except Exception as e:
            print(e)


    def get_suffix_data(self):
        job = self.JoblineEdit.text().strip()
        conn, cur = self.server_configuration()
        cur.execute("SELECT suffix, COUNT(item) \
                             FROM BTK_LabelKittingView WHERE job = ? \
                             GROUP BY suffix", (job,))

        # Fetch all rows and print them
        suffix_data = []
        rows = cur.fetchall()
        for row in rows:
            suffix_data.append({"suffix": row[0], "TotalNumber": row[1], "status": "ready"})
        conn.close()
        return suffix_data

    def show_suffixes_button(self):
        try:
            self.clear_all_button()
            suffix_data = self.get_suffix_data()
            # print(suffix_data)
            self.load_data(suffix_data)
        except Exception as e:
            error_dialog = QMessageBox()
            error_dialog.setIcon(QMessageBox.Critical)
            error_dialog.setText("An error occurred while showing suffixes.")
            error_dialog.setInformativeText(str(e))
            error_dialog.setWindowTitle("Error")
            error_dialog.exec_()

    def load_data(self, suffix_data):
        self.tableWidget.setRowCount(len(suffix_data))
        for row, data in enumerate(suffix_data):
            job_suffix = QtWidgets.QTableWidgetItem(str(data["suffix"]))
            job_suffix.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(row, 0, job_suffix)

            total_number = QtWidgets.QTableWidgetItem(str(data["TotalNumber"]))
            total_number.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(row, 1, total_number)

            job_status = QtWidgets.QTableWidgetItem(data["status"])
            job_status.setTextAlignment(QtCore.Qt.AlignCenter)
            self.tableWidget.setItem(row, 2, job_status)

    def clear_all_button(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)

    def get_selected_data_for_job(self):
        job = self.JoblineEdit.text().strip()
        conn, cur = self.server_configuration()

        # get selected rows
        selected_items = self.tableWidget.selectedItems()
        selected_suffix_values = [item.text() for item in selected_items if item.column() == 0]
        # suffix datatype in LabelKitting is int, so we need to change datatype to int for selected_suffix_values
        selected_suffix_values = [int(value) for value in selected_suffix_values]

        # Create the SQL query with the selected suffix values
        query = "SELECT * FROM BTK_LabelKittingView WHERE job = ? AND suffix IN ({})".format(
            ','.join(['?'] * len(selected_suffix_values)))

        # Execute the query with the job and selected suffix values as parameters
        try:
            cur.execute(query, (job,) + tuple(selected_suffix_values))
            # Fetch all rows
            rows = cur.fetchall()  # fetch data before closing the cursor
            conn.commit()
            selected_data = []
            for row in rows:
                selected_data.append({"job": row[1], "suffix": row[2], "wc": row[3],
                                      "item": row[4], "description": row[5], "qty_on_hand": row[6],
                                      "QtyNeed": row[7], "loc": row[8], "seq": row[9]})
        except Exception as e:
            print("Error:", e)
        finally:
            cur.close()  # close the cursor
            conn.close()

        return selected_data



    # Work 1, use for Zebra
    def print_selected(self):
        try:
            selected_data = self.get_selected_data_for_job()
            # Set up the printer and print dialog
            printer = QPrinter(QPrinter.HighResolution)
            print_dialog = QPrintDialog(printer)
            if print_dialog.exec_() == QPrintDialog.Accepted:
                painter = QtGui.QPainter()
                painter.begin(printer)
                try:
                    for data in selected_data:
                        try:
                            job_value = data["job"]
                            suffix_value = str(data["suffix"])
                            wc_value = data["wc"]
                            item_value = data["item"]
                            desc_value = data["description"]
                            onhand_value = str(data["qty_on_hand"])
                            qtyNeed_value = str(data["QtyNeed"])
                            loc_value = data["loc"]
                            seq_value = str(data["seq"])
                            printer_name = printer.printerName()
                            label = KittingLabel()
                            label.setLabel(job_value, suffix_value, wc_value, item_value, desc_value, onhand_value,
                                           qtyNeed_value, loc_value, seq_value)
                            label.render(painter)
                            # label.printLabel(label, printer_name)
                            printer.newPage()
                        except Exception as e:
                            print(e)
                finally:
                    painter.end()
        except Exception as e:
            error_dialog = QMessageBox()
            error_dialog.setIcon(QMessageBox.Critical)
            error_dialog.setText("An error occurred while printing the labels.")
            error_dialog.setInformativeText(str(e))
            error_dialog.setWindowTitle("Error")
            error_dialog.exec_()

    # Work 2, to debug the label in pdf
    # def print_selected(self):
    #     selected_data = self.get_selected_data_for_job()
    #     # print(selected_data)
    #     # Set up the printer and print dialog
    #     printer = QPrinter(QPrinter.HighResolution)
    #     print_dialog = QPrintDialog(printer)
    #     if print_dialog.exec_() == QPrintDialog.Accepted:
    #         labels = []
    #         for data in selected_data:
    #             try:
    #                 job_value = data["job"]
    #                 print(job_value)
    #                 suffix_value = str(data["suffix"])
    #                 print(suffix_value)
    #                 wc_value = data["wc"]
    #                 item_value = data["item"]
    #                 desc_value = data["description"]
    #                 onhand_value = str(data["qty_on_hand"])
    #                 qtyNeed_value = str(data["QtyNeed"])
    #                 loc_value = data["loc"]
    #                 seq_value = str(data["seq"])
    #                 label = KittingLabel()
    #                 label.setLabel(job_value, suffix_value, wc_value, item_value, desc_value, onhand_value, qtyNeed_value, loc_value, seq_value)
    #                 labels.append(label)
    #             except Exception as e:
    #                 print(e)
    #         if labels:
    #             label.printLabel(labels)


    def get_all_data_for_job(self):
        job = self.JoblineEdit.text().strip()
        conn, cur = self.server_configuration()
        cur.execute("SELECT * FROM BTK_LabelKittingView WHERE job = ? ", (job,))

        # Fetch all rows and print them
        all_data = []
        rows = cur.fetchall()
        for row in rows:
            all_data.append({"job": row[1], "suffix": row[2], "wc": row[3],
                             "item": row[4], "description": row[5], "qty_on_hand": row[6],
                             "QtyNeed": row[7], "loc": row[8], "seq": row[9]})
        conn.close()
        return all_data



    # # Work 1, use for Zebra
    def print_all(self):
        try:
            all_data = self.get_all_data_for_job()
            # Set up the printer and print dialog
            printer = QPrinter(QPrinter.HighResolution)
            print_dialog = QPrintDialog(printer)
            if print_dialog.exec_() == QPrintDialog.Accepted:
                painter = QtGui.QPainter()
                painter.begin(printer)
                try:
                    for data in all_data:
                        try:
                            job_value = data["job"]
                            suffix_value = str(data["suffix"])
                            wc_value = data["wc"]
                            item_value = data["item"]
                            desc_value = data["description"]
                            onhand_value = str(data["qty_on_hand"])
                            qtyNeed_value = str(data["QtyNeed"])
                            loc_value = data["loc"]
                            seq_value = str(data["seq"])
                            printer_name = printer.printerName()
                            label = KittingLabel()
                            label.setLabel(job_value, suffix_value, wc_value, item_value, desc_value, onhand_value,
                                           qtyNeed_value, loc_value, seq_value)
                            label.render(painter)
                            label.printLabel(label, printer_name)
                            printer.newPage()
                        except Exception as e:
                            print(e)
                finally:
                    painter.end()

        except Exception as e:
            error_dialog = QMessageBox()
            error_dialog.setIcon(QMessageBox.Critical)
            error_dialog.setText("An error occurred while printing the labels.")
            error_dialog.setInformativeText(str(e))
            error_dialog.setWindowTitle("Error")
            error_dialog.exec_()

    # Work 2, to debug the label in pdf
    # def print_all(self):
    #     all_data = self.get_all_data_for_job()
    #     # print(selected_data)
    #     # Set up the printer and print dialog
    #     printer = QPrinter(QPrinter.HighResolution)
    #     print_dialog = QPrintDialog(printer)
    #     if print_dialog.exec_() == QPrintDialog.Accepted:
    #         labels = []
    #         for data in all_data:
    #             try:
    #                 job_value = data["job"]
    #                 print(job_value)
    #                 suffix_value = str(data["suffix"])
    #                 print(suffix_value)
    #                 wc_value = data["wc"]
    #                 item_value = data["item"]
    #                 desc_value = data["description"]
    #                 onhand_value = str(data["qty_on_hand"])
    #                 qtyNeed_value = str(data["QtyNeed"])
    #                 loc_value = data["loc"]
    #                 seq_value = str(data["seq"])
    #                 label = KittingLabel()
    #                 label.setLabel(job_value, suffix_value, wc_value, item_value, desc_value, onhand_value, qtyNeed_value, loc_value, seq_value)
    #                 labels.append(label)
    #             except Exception as e:
    #                 print(e)
    #         if labels:
    #             label.printLabel(labels)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
